final_model_n
max(prediction_denorm)
max(final_model_n$pred)
prediction_denorm
testing3$SalePrice
prediction_denorm <- final_model_n$pred* (max(testing3) - min(testing3)) + min(testing3)
final_residual_n <- testing3$SalePrice - prediction_denorm
final_MSE_n<- mean(final_residual_n * final_residual_n)
final_MSE_n
result<-rep(1,len_validation)
for (i in (1:len_validation))
{
leo <- knn.reg(train=training_n,test=validating_n,y=training_n$SalePrice,k=i)
prediction_denorm <- leo$pred * (max(validating3) - min(validating3)) + min(validating3)
residual <- validating3$SalePrice - prediction_denorm
MSE <- mean(residual * residual)
result[i] <- MSE
}
result
a11
final_model_n <- knn.reg(train = training_n, test = testing_n, y = training_n$SalePrice, k = a12)
prediction_denorm <- final_model_n$pred* (max(testing3) - min(testing3)) + min(testing3)
final_residual_n <- testing3$SalePrice - prediction_denorm
final_MSE_n<- mean(final_residual_n * final_residual_n)
final_MSE_n
prediction_denorm <- final_model_n$pred* (max(testing3) - min(testing3)) + min(testing3)
final_residual_n <- testing3$SalePrice - prediction_denorm
final_MSE_n<- mean(final_residual_n * final_residual_n)
final_MSE_n
final_model_n <- knn.reg(train = training_n, test = testing_n, y = training_n$SalePrice, k = 2)
prediction_denorm <- final_model_n$pred* (max(testing3) - min(testing3)) + min(testing3)
final_residual_n <- testing3$SalePrice - prediction_denorm
final_MSE_n<- mean(final_residual_n * final_residual_n)
final_MSE_n
final_model_t <- knn.reg(train = training_t, test = testing_t, y = training_t$logSalePrice, k = 1)
final_residual_t <- testing3$SalePrice - exp(final_model_t$pred)
final_MSE_t <- mean(final_residual_t * final_residual_t)
final_MSE_t
final_model_n <- knn.reg(train = training_n, test = testing_n, y = training_n$SalePrice, k = 1)
prediction_denorm <- final_model_n$pred* (max(testing3) - min(testing3)) + min(testing3)
final_residual_n <- testing3$SalePrice - prediction_denorm
final_MSE_n<- mean(final_residual_n * final_residual_n)
final_MSE_n
MSE_part
final_model_t <- knn.reg(train = training_t, test = testing_t, y = training_t$logSalePrice, k = 1)
final_residual_t <- testing3$SalePrice - exp(final_model_t$pred)
final_MSE_t <- mean(final_residual_t * final_residual_t)
final_MSE_t
a10
final_model_t
View(testign3)
View(testing3)
final_model_t <- knn.reg(train = training_t, test = testing_t, y = training_t$logSalePrice, k = a10)
final_residual_t <- testing3$SalePrice - exp(final_model_t$pred)
final_MSE_t <- mean(final_residual_t * final_residual_t)
final_MSE_t
final_model <- knn.reg(train = training3, test = testing3, y = training3$SalePrice, k = a8)
final_residual <- testing3$SalePrice - final_model$pred
final_MSE <- mean(final_residual * final_residual)
final_MSE
g3, test = testing3, y = training3$SalePrice, k = 1)
final_model <- knn.reg(train = training3, test = testing3, y = training3$SalePrice, k = 1)
final_residual <- testing3$SalePrice - final_model$pred
final_MSE <- mean(final_residual * final_residual)
final_MSE
training = df1[index1,]
GradedHW1_All_Data <- read.csv("GradedHW1-All-Data.csv")
df1= subset(GradedHW1_All_Data,!(GradedHW1_All_Data$Bldg.Type!="1Fam"))
set.seed(1)
index1 = sample(1:nrow(df1), size=0.5*nrow(df1))
training = df1[index1,]
teva = df1[-index1,]
dim(training)
dim(teva)
index2 = sample(1:nrow(teva), size=0.5*nrow(teva))
testing = teva[index2,]
validating = teva[-index2,]
describe(train_set)
# Import training, validation and test data set
GradedHW1_Train_Data <- read.csv("GradedHW1-Train-Data.csv")
GradedHW1_Validation_Data <- read.csv("GradedHW1-Validation-Data.csv")
GradedHW1_Test_Data <- read.csv("GradedHW1-Test-Data.csv")
training1 <- GradedHW1_Train_Data[c("Lot.Area", "Total.Bsmt.SF", "Gr.Liv.Area", "Full.Bath", "Bedroom.AbvGr", "Year.Built", "SalePrice")]
training1$Building.Age <-2010 - training1$Year.Built
training3 <- training1[c("Lot.Area", "Total.Bsmt.SF", "Gr.Liv.Area", "Full.Bath", "Bedroom.AbvGr","Building.Age" , "SalePrice")]
validating1 <- GradedHW1_Validation_Data[c("Lot.Area", "Total.Bsmt.SF", "Gr.Liv.Area", "Full.Bath", "Bedroom.AbvGr", "Year.Built", "SalePrice")]
validating2 <- na.omit(validating1)
validating2$Building.Age <-2010 - validating2$Year.Built
validating3 <- validating2[c("Lot.Area", "Total.Bsmt.SF", "Gr.Liv.Area", "Full.Bath", "Bedroom.AbvGr","Building.Age" , "SalePrice")]
testing1 <- GradedHW1_Test_Data[c("Lot.Area", "Total.Bsmt.SF", "Gr.Liv.Area", "Full.Bath", "Bedroom.AbvGr", "Year.Built", "SalePrice")]
testing1$Building.Age <-2010 - testing1$Year.Built
testing3 <- testing1[c("Lot.Area", "Total.Bsmt.SF", "Gr.Liv.Area", "Full.Bath", "Bedroom.AbvGr","Building.Age" , "SalePrice")]
training3 <- training1[c("Lot.Area", "Total.Bsmt.SF", "Gr.Liv.Area", "Full.Bath", "Bedroom.AbvGr","Building.Age" , "SalePrice")]
len_validation <- nrow(validating3)
result<-rep(1,len_validation)
for (i in (1:len_validation))
{
leo <- knn.reg(train=training3,test=validating3,y=training3$SalePrice,k=i)
residual <- validating3$SalePrice - leo$pred
MSE <- mean(residual * residual)
result[i] <- MSE
}
MSE_full <- data.frame(k = (1:len_validation),MSE = result)
ggplot(MSE_full,aes(x = k, y = MSE)) + geom_point()
MSE_part <- subset(MSE_full, k < 50)
ggplot(MSE_part,aes(x = k, y = MSE)) + geom_point()
a7 <- min(MSE_full$MSE)
a8 <- MSE_full[MSE_full$MSE == a7,1]
final_model <- knn.reg(train = training3, test = testing3, y = training3$SalePrice, k = 10)
final_residual <- testing3$SalePrice - final_model$pred
final_MSE <- mean(final_residual * final_residual)
final_MSE
final_model <- knn.reg(train = training3, test = testing3, y = training3$SalePrice, k = 1)
final_residual <- testing3$SalePrice - final_model$pred
final_MSE <- mean(final_residual * final_residual)
final_MSE
final_model <- knn.reg(train = training3, test = testing3, y = training3$SalePrice, k = a8)
final_residual <- testing3$SalePrice - final_model$pred
final_MSE <- mean(final_residual * final_residual)
final_MSE
final_model_t <- knn.reg(train = training_t, test = testing_t, y = training_t$logSalePrice, k = a10)
final_residual_t <- testing3$SalePrice - exp(final_model_t$pred)
final_MSE_t <- mean(final_residual_t * final_residual_t)
final_MSE_t
training_t<-training3
training_t$logLot.Area<-log(training_t$Lot.Area)
training_t$logTotal.Bsmt.SF<-log(training_t$Total.Bsmt.SF+0.3) # Total.Bsmt.SF contains value 0.
training_t$logGr.Liv.Area<-log(training_t$Gr.Liv.Area)
training_t$sqFull.Bath<-training_t$Full.Bath^(1/2)
training_t$sqBedroom.AbvGr<-training_t$Bedroom.AbvGr^(1/2)
training_t$logSalePrice<-log(training_t$SalePrice)
validating_t<-validating3
validating_t$logLot.Area<-log(validating_t$Lot.Area)
validating_t$logTotal.Bsmt.SF<-log(validating_t$Total.Bsmt.SF+0.3)
validating_t$logGr.Liv.Area<-log(validating_t$Gr.Liv.Area)
validating_t$sqFull.Bath<-validating_t$Full.Bath^(1/2)
validating_t$sqBedroom.AbvGr<-validating_t$Bedroom.AbvGr^(1/2)
validating_t$logSalePrice<-log(validating_t$SalePrice)
testing_t<-testing3
testing_t$logLot.Area<-log(testing_t$Lot.Area)
testing_t$logTotal.Bsmt.SF<-log(testing_t$Total.Bsmt.SF+0.3)
testing_t$logGr.Liv.Area<-log(testing_t$Gr.Liv.Area)
testing_t$sqFull.Bath<-testing_t$Full.Bath^(1/2)
testing_t$sqBedroom.AbvGr<-testing_t$Bedroom.AbvGr^(1/2)
testing_t$logSalePrice<-log(testing_t$SalePrice)
training_t <- training_t[c("logLot.Area", "logTotal.Bsmt.SF", "logGr.Liv.Area", "sqFull.Bath", "sqBedroom.AbvGr","Building.Age" , "logSalePrice")]
validating_t <- validating_t[c("logLot.Area", "logTotal.Bsmt.SF", "logGr.Liv.Area", "sqFull.Bath", "sqBedroom.AbvGr","Building.Age" , "logSalePrice")]
testing_t <- testing_t[c("logLot.Area", "logTotal.Bsmt.SF", "logGr.Liv.Area", "sqFull.Bath", "sqBedroom.AbvGr","Building.Age" , "logSalePrice")]
result<-rep(1,len_validation)
for (i in (1:len_validation))
{
leo <- knn.reg(train=training_t,test=validating_t,y=training_t$logSalePrice,k=i)
residual <- validating3$SalePrice - exp(leo$pred)
MSE <- mean(residual * residual)
result[i] <- MSE
}
MSE_full <- data.frame(k = (1:len_validation),MSE = result)
ggplot(plot_full,aes(x = k, y = MSE)) + geom_point()
MSE_part <- subset(MSE_full, k < 50)
ggplot(plot_part,aes(x = k, y = MSE)) + geom_point()
a9 <- min(MSE_full$MSE)
a10 <- MSE_full[MSE_full$MSE == a9,1]
final_model_t <- knn.reg(train = training_t, test = testing_t, y = training_t$logSalePrice, k = a10)
final_residual_t <- testing3$SalePrice - exp(final_model_t$pred)
final_MSE_t <- mean(final_residual_t * final_residual_t)
final_MSE_t
library(IntClust)
training_n <- Normalization(training3, method = 'r')
training_n <- training_n[c("Lot.Area", "Total.Bsmt.SF", "Gr.Liv.Area", "Full.Bath", "Bedroom.AbvGr","Building.Age" , "SalePrice")]
validating_n <-  Normalization(validating3, method = 'r')
validating_n <- validating_n[c("Lot.Area", "Total.Bsmt.SF", "Gr.Liv.Area", "Full.Bath", "Bedroom.AbvGr","Building.Age" , "SalePrice")]
testing_n <-  Normalization(testing3, method = 'r')
testing_n <- testing_n[c("Lot.Area", "Total.Bsmt.SF", "Gr.Liv.Area", "Full.Bath", "Bedroom.AbvGr","Building.Age" , "SalePrice")]
result<-rep(1,len_validation)
for (i in (1:len_validation))
{
leo <- knn.reg(train=training_n,test=validating_n,y=training_n$SalePrice,k=i)
prediction_denorm <- leo$pred * (max(validating3) - min(validating3)) + min(validating3)
residual <- validating3$SalePrice - prediction_denorm
MSE <- mean(residual * residual)
result[i] <- MSE
}
#leo <- knn.reg(train=training_n,test=validating_n,y=training_n$SalePrice,k=1)
#prediction_denorm <- leo$pred * (max(validating3) - min(validating3)) + min(validating3)
#residual <- validating3$SalePrice - prediction_denorm
#MSE <- mean(residual * residual )
MSE_full <- data.frame(k = (1:len_validation),MSE = result)
ggplot(plot_full,aes(x = k, y = MSE)) + geom_point()
MSE_part <- subset(plot_full, k < 50)
ggplot(plot_part,aes(x = k, y = MSE)) + geom_point()
a11 <- min(MSE_full$MSE)
a12 <- MSE_full[MSE_full$MSE == a11,1]
final_model_n <- knn.reg(train = training_n, test = testing_n, y = training_n$SalePrice, k = 1)
prediction_denorm <- final_model_n$pred* (max(testing3) - min(testing3)) + min(testing3)
final_residual_n <- testing3$SalePrice - prediction_denorm
final_MSE_n<- mean(final_residual_n * final_residual_n)
final_MSE_n
GradedHW1_Train_Data <- read.csv("GradedHW1-Train-Data.csv")
GradedHW1_Validation_Data <- read.csv("GradedHW1-Validation-Data.csv")
GradedHW1_Test_Data <- read.csv("GradedHW1-Test-Data.csv")
training1 <- GradedHW1_Train_Data[c("Lot.Area", "Total.Bsmt.SF", "Gr.Liv.Area", "Full.Bath", "Bedroom.AbvGr", "Year.Built", "SalePrice")]
training1$Building.Age <-2010 - training1$Year.Built
training3 <- training1[c("Lot.Area", "Total.Bsmt.SF", "Gr.Liv.Area", "Full.Bath", "Bedroom.AbvGr","Building.Age" , "SalePrice")]
validating1 <- GradedHW1_Validation_Data[c("Lot.Area", "Total.Bsmt.SF", "Gr.Liv.Area", "Full.Bath", "Bedroom.AbvGr", "Year.Built", "SalePrice")]
validating2 <- na.omit(validating1)
validating2$Building.Age <-2010 - validating2$Year.Built
validating3 <- validating2[c("Lot.Area", "Total.Bsmt.SF", "Gr.Liv.Area", "Full.Bath", "Bedroom.AbvGr","Building.Age" , "SalePrice")]
testing1 <- GradedHW1_Test_Data[c("Lot.Area", "Total.Bsmt.SF", "Gr.Liv.Area", "Full.Bath", "Bedroom.AbvGr", "Year.Built", "SalePrice")]
testing1$Building.Age <-2010 - testing1$Year.Built
testing3 <- testing1[c("Lot.Area", "Total.Bsmt.SF", "Gr.Liv.Area", "Full.Bath", "Bedroom.AbvGr","Building.Age" , "SalePrice")]
describe(training3)
colnames(training3)
hist(training3$Lot.Area, n = 100)
plot(sort(training3$Lot.Area))
hist(training3$Total.Bsmt.SF, n = 100)
plot(sort(training3$Total.Bsmt.SF))
hist(training3$Gr.Liv.Area, n = 100)
plot(sort(training3$Gr.Liv.Area))
hist(training3$Full.Bath, n = 100)
plot(sort(training3$Full.Bath))
hist(training3$Bedroom.AbvGr, n = 100)
plot(sort(training3$Bedroom.AbvGr))
hist(training3$Bldg.Age, n = 100)
GradedHW1_Train_Data <- read.csv("GradedHW1-Train-Data.csv")
GradedHW1_Validation_Data <- read.csv("GradedHW1-Validation-Data.csv")
GradedHW1_Test_Data <- read.csv("GradedHW1-Test-Data.csv")
training1 <- GradedHW1_Train_Data[c("Lot.Area", "Total.Bsmt.SF", "Gr.Liv.Area", "Full.Bath", "Bedroom.AbvGr", "Year.Built", "SalePrice")]
training1$Building.Age <-2010 - training1$Year.Built
training3 <- training1[c("Lot.Area", "Total.Bsmt.SF", "Gr.Liv.Area", "Full.Bath", "Bedroom.AbvGr","Building.Age" , "SalePrice")]
validating1 <- GradedHW1_Validation_Data[c("Lot.Area", "Total.Bsmt.SF", "Gr.Liv.Area", "Full.Bath", "Bedroom.AbvGr", "Year.Built", "SalePrice")]
validating2 <- na.omit(validating1)
validating2$Building.Age <-2010 - validating2$Year.Built
validating3 <- validating2[c("Lot.Area", "Total.Bsmt.SF", "Gr.Liv.Area", "Full.Bath", "Bedroom.AbvGr","Building.Age" , "SalePrice")]
testing1 <- GradedHW1_Test_Data[c("Lot.Area", "Total.Bsmt.SF", "Gr.Liv.Area", "Full.Bath", "Bedroom.AbvGr", "Year.Built", "SalePrice")]
testing1$Building.Age <-2010 - testing1$Year.Built
testing3 <- testing1[c("Lot.Area", "Total.Bsmt.SF", "Gr.Liv.Area", "Full.Bath", "Bedroom.AbvGr","Building.Age" , "SalePrice")]
describe(training3)
colnames(training3)
hist(training3$Lot.Area, n = 100)
plot(sort(training3$Lot.Area))
hist(training3$Total.Bsmt.SF, n = 100)
plot(sort(training3$Total.Bsmt.SF))
hist(training3$Gr.Liv.Area, n = 100)
plot(sort(training3$Gr.Liv.Area))
hist(training3$Full.Bath, n = 100)
plot(sort(training3$Full.Bath))
hist(training3$Bedroom.AbvGr, n = 100)
plot(sort(training3$Bedroom.AbvGr))
hist(training3$Building.Age, n = 100)
plot(sort(training3$Bldg.Age))
GradedHW1_Train_Data <- read.csv("GradedHW1-Train-Data.csv")
GradedHW1_Validation_Data <- read.csv("GradedHW1-Validation-Data.csv")
GradedHW1_Test_Data <- read.csv("GradedHW1-Test-Data.csv")
training1 <- GradedHW1_Train_Data[c("Lot.Area", "Total.Bsmt.SF", "Gr.Liv.Area", "Full.Bath", "Bedroom.AbvGr", "Year.Built", "SalePrice")]
training1$Building.Age <-2010 - training1$Year.Built
training3 <- training1[c("Lot.Area", "Total.Bsmt.SF", "Gr.Liv.Area", "Full.Bath", "Bedroom.AbvGr","Building.Age" , "SalePrice")]
validating1 <- GradedHW1_Validation_Data[c("Lot.Area", "Total.Bsmt.SF", "Gr.Liv.Area", "Full.Bath", "Bedroom.AbvGr", "Year.Built", "SalePrice")]
validating2 <- na.omit(validating1)
validating2$Building.Age <-2010 - validating2$Year.Built
validating3 <- validating2[c("Lot.Area", "Total.Bsmt.SF", "Gr.Liv.Area", "Full.Bath", "Bedroom.AbvGr","Building.Age" , "SalePrice")]
testing1 <- GradedHW1_Test_Data[c("Lot.Area", "Total.Bsmt.SF", "Gr.Liv.Area", "Full.Bath", "Bedroom.AbvGr", "Year.Built", "SalePrice")]
testing1$Building.Age <-2010 - testing1$Year.Built
testing3 <- testing1[c("Lot.Area", "Total.Bsmt.SF", "Gr.Liv.Area", "Full.Bath", "Bedroom.AbvGr","Building.Age" , "SalePrice")]
describe(training3)
colnames(training3)
hist(training3$Lot.Area, n = 100)
plot(sort(training3$Lot.Area))
hist(training3$Total.Bsmt.SF, n = 100)
plot(sort(training3$Total.Bsmt.SF))
hist(training3$Gr.Liv.Area, n = 100)
plot(sort(training3$Gr.Liv.Area))
hist(training3$Full.Bath, n = 100)
plot(sort(training3$Full.Bath))
hist(training3$Bedroom.AbvGr, n = 100)
plot(sort(training3$Bedroom.AbvGr))
hist(training3$Building.Age, n = 100)
plot(sort(training3$Building.Age))
hist(training3$SalePrice, n = 100)
plot(sort(training3$SalePrice))
cor(training3)
plot(training3$Lot.Area,training3$SalePrice)
plot(training3$Total.Bsmt.SF,training3$SalePrice)
plot(training3$Gr.Liv.Area,training3$SalePrice)
plot(training3$Full.Bath,training3$SalePrice)
plot(training3$Bedroom.AbvGr,training3$SalePrice)
plot(training3$Building.Age,training3$SalePrice)
setwd('/Users/leoma/Dropbox/DataViz/Assignment 1')
data <- read.csv('AirlineDelayData2003-2017.csv', header = TRUE, sep = ',')
require(ggplot2)
require(dplyr)
colnames(data)
filter(data, year == 2017)
filter(data, year == 2017 && month == 1)
filter(data, year == 2017 && month == 2)
filter(data, year == 2017 & month == 2)
library(readr)
library(ISLR)
library(ggplot2)
library(psych)
library(FNN)
setwd('/Users/leoma/Dropbox/IntroML1/Assignment1')
GradedHW1_All_Data <- read.csv("GradedHW1-All-Data.csv")
df1= subset(GradedHW1_All_Data,!(GradedHW1_All_Data$Bldg.Type!="1Fam"))
set.seed(1)
index1 = sample(1:nrow(df1), size=0.5*nrow(df1))
training = df1[index1,]
teva = df1[-index1,]
dim(training)
dim(teva)
index2 = sample(1:nrow(teva), size=0.5*nrow(teva))
testing = teva[index2,]
validating = teva[-index2,]
GradedHW1_Train_Data <- read.csv("GradedHW1-Train-Data.csv")
GradedHW1_Validation_Data <- read.csv("GradedHW1-Validation-Data.csv")
GradedHW1_Test_Data <- read.csv("GradedHW1-Test-Data.csv")
training1 <- GradedHW1_Train_Data[c("Lot.Area", "Total.Bsmt.SF", "Gr.Liv.Area", "Full.Bath", "Bedroom.AbvGr", "Year.Built", "SalePrice")]
training1$Building.Age <-2010 - training1$Year.Built
training3 <- training1[c("Lot.Area", "Total.Bsmt.SF", "Gr.Liv.Area", "Full.Bath", "Bedroom.AbvGr","Building.Age" , "SalePrice")]
validating1 <- GradedHW1_Validation_Data[c("Lot.Area", "Total.Bsmt.SF", "Gr.Liv.Area", "Full.Bath", "Bedroom.AbvGr", "Year.Built", "SalePrice")]
validating2 <- na.omit(validating1)
validating2$Building.Age <-2010 - validating2$Year.Built
validating3 <- validating2[c("Lot.Area", "Total.Bsmt.SF", "Gr.Liv.Area", "Full.Bath", "Bedroom.AbvGr","Building.Age" , "SalePrice")]
testing1 <- GradedHW1_Test_Data[c("Lot.Area", "Total.Bsmt.SF", "Gr.Liv.Area", "Full.Bath", "Bedroom.AbvGr", "Year.Built", "SalePrice")]
testing1$Building.Age <-2010 - testing1$Year.Built
testing3 <- testing1[c("Lot.Area", "Total.Bsmt.SF", "Gr.Liv.Area", "Full.Bath", "Bedroom.AbvGr","Building.Age" , "SalePrice")]
describe(training3)
colnames(training3)
hist(training3$Lot.Area, n = 100)
plot(sort(training3$Lot.Area))
hist(training3$Total.Bsmt.SF, n = 100)
plot(sort(training3$Total.Bsmt.SF))
hist(training3$Gr.Liv.Area, n = 100)
plot(sort(training3$Gr.Liv.Area))
hist(training3$Full.Bath, n = 100)
plot(sort(training3$Full.Bath))
hist(training3$Bedroom.AbvGr, n = 100)
plot(sort(training3$Bedroom.AbvGr))
hist(training3$Building.Age, n = 100)
plot(sort(training3$Building.Age))
hist(training3$SalePrice, n = 100)
plot(sort(training3$SalePrice))
cor(training3)
plot(training3$Lot.Area,training3$SalePrice)
plot(training3$Total.Bsmt.SF,training3$SalePrice)
plot(training3$Gr.Liv.Area,training3$SalePrice)
plot(training3$Full.Bath,training3$SalePrice)
plot(training3$Bedroom.AbvGr,training3$SalePrice)
plot(training3$Building.Age,training3$SalePrice)
# Import training, validation and test data set
len_validation <- nrow(validating3)
result<-rep(1,len_validation)
for (i in (1:len_validation))
{
leo <- knn.reg(train=training3,test=validating3,y=training3$SalePrice,k=i)
residual <- validating3$SalePrice - leo$pred
MSE <- mean(residual * residual)
result[i] <- MSE
}
MSE_full <- data.frame(k = (1:len_validation),MSE = result)
ggplot(MSE_full,aes(x = k, y = MSE)) + geom_point()
MSE_part <- subset(MSE_full, k < 50)
ggplot(MSE_part,aes(x = k, y = MSE)) + geom_point()
a7 <- min(MSE_full$MSE)
a8 <- MSE_full[MSE_full$MSE == a7,1]
final_model <- knn.reg(train = training3, test = testing3, y = training3$SalePrice, k = a8)
final_residual <- testing3$SalePrice - final_model$pred
final_MSE <- mean(final_residual * final_residual)
final_MSE
training_t<-training3
training_t$logLot.Area<-log(training_t$Lot.Area)
training_t$logTotal.Bsmt.SF<-log(training_t$Total.Bsmt.SF+0.3) # Total.Bsmt.SF contains value 0.
training_t$logGr.Liv.Area<-log(training_t$Gr.Liv.Area)
training_t$sqFull.Bath<-training_t$Full.Bath^(1/2)
training_t$sqBedroom.AbvGr<-training_t$Bedroom.AbvGr^(1/2)
training_t$logSalePrice<-log(training_t$SalePrice)
validating_t<-validating3
validating_t$logLot.Area<-log(validating_t$Lot.Area)
validating_t$logTotal.Bsmt.SF<-log(validating_t$Total.Bsmt.SF+0.3)
validating_t$logGr.Liv.Area<-log(validating_t$Gr.Liv.Area)
validating_t$sqFull.Bath<-validating_t$Full.Bath^(1/2)
validating_t$sqBedroom.AbvGr<-validating_t$Bedroom.AbvGr^(1/2)
validating_t$logSalePrice<-log(validating_t$SalePrice)
testing_t<-testing3
testing_t$logLot.Area<-log(testing_t$Lot.Area)
testing_t$logTotal.Bsmt.SF<-log(testing_t$Total.Bsmt.SF+0.3)
testing_t$logGr.Liv.Area<-log(testing_t$Gr.Liv.Area)
testing_t$sqFull.Bath<-testing_t$Full.Bath^(1/2)
testing_t$sqBedroom.AbvGr<-testing_t$Bedroom.AbvGr^(1/2)
testing_t$logSalePrice<-log(testing_t$SalePrice)
training_t <- training_t[c("logLot.Area", "logTotal.Bsmt.SF", "logGr.Liv.Area", "sqFull.Bath", "sqBedroom.AbvGr","Building.Age" , "logSalePrice")]
validating_t <- validating_t[c("logLot.Area", "logTotal.Bsmt.SF", "logGr.Liv.Area", "sqFull.Bath", "sqBedroom.AbvGr","Building.Age" , "logSalePrice")]
testing_t <- testing_t[c("logLot.Area", "logTotal.Bsmt.SF", "logGr.Liv.Area", "sqFull.Bath", "sqBedroom.AbvGr","Building.Age" , "logSalePrice")]
result<-rep(1,len_validation)
for (i in (1:len_validation))
{
leo <- knn.reg(train=training_t,test=validating_t,y=training_t$logSalePrice,k=i)
residual <- validating3$SalePrice - exp(leo$pred)
MSE <- mean(residual * residual)
result[i] <- MSE
}
MSE_full <- data.frame(k = (1:len_validation),MSE = result)
ggplot(plot_full,aes(x = k, y = MSE)) + geom_point()
MSE_part <- subset(MSE_full, k < 50)
ggplot(plot_part,aes(x = k, y = MSE)) + geom_point()
a9 <- min(MSE_full$MSE)
a10 <- MSE_full[MSE_full$MSE == a9,1]
final_model_t <- knn.reg(train = training_t, test = testing_t, y = training_t$logSalePrice, k = a10)
final_residual_t <- testing3$SalePrice - exp(final_model_t$pred)
final_MSE_t <- mean(final_residual_t * final_residual_t)
final_MSE_t
result
training_t<-training3
training_t$logLot.Area<-log(training_t$Lot.Area)
training_t$logTotal.Bsmt.SF<-log(training_t$Total.Bsmt.SF+0.3) # Total.Bsmt.SF contains value 0.
training_t$logGr.Liv.Area<-log(training_t$Gr.Liv.Area)
training_t$sqFull.Bath<-training_t$Full.Bath^(1/2)
training_t$sqBedroom.AbvGr<-training_t$Bedroom.AbvGr^(1/2)
training_t$logSalePrice<-log(training_t$SalePrice)
validating_t<-validating3
validating_t$logLot.Area<-log(validating_t$Lot.Area)
validating_t$logTotal.Bsmt.SF<-log(validating_t$Total.Bsmt.SF+0.3)
validating_t$logGr.Liv.Area<-log(validating_t$Gr.Liv.Area)
validating_t$sqFull.Bath<-validating_t$Full.Bath^(1/2)
validating_t$sqBedroom.AbvGr<-validating_t$Bedroom.AbvGr^(1/2)
validating_t$logSalePrice<-log(validating_t$SalePrice)
testing_t<-testing3
testing_t$logLot.Area<-log(testing_t$Lot.Area)
testing_t$logTotal.Bsmt.SF<-log(testing_t$Total.Bsmt.SF+0.3)
testing_t$logGr.Liv.Area<-log(testing_t$Gr.Liv.Area)
testing_t$sqFull.Bath<-testing_t$Full.Bath^(1/2)
testing_t$sqBedroom.AbvGr<-testing_t$Bedroom.AbvGr^(1/2)
testing_t$logSalePrice<-log(testing_t$SalePrice)
training_t <- training_t[c("logLot.Area", "logTotal.Bsmt.SF", "logGr.Liv.Area", "sqFull.Bath", "sqBedroom.AbvGr","Building.Age" , "logSalePrice")]
validating_t <- validating_t[c("logLot.Area", "logTotal.Bsmt.SF", "logGr.Liv.Area", "sqFull.Bath", "sqBedroom.AbvGr","Building.Age" , "logSalePrice")]
testing_t <- testing_t[c("logLot.Area", "logTotal.Bsmt.SF", "logGr.Liv.Area", "sqFull.Bath", "sqBedroom.AbvGr","Building.Age" , "logSalePrice")]
result<-rep(1,len_validation)
for (i in (1:len_validation))
{
leo <- knn.reg(train=training_t,test=validating_t,y=training_t$logSalePrice,k=i)
residual <- exp(validating_t$logSalePrice - leo$pred)
MSE <- mean(residual * residual)
result[i] <- MSE
}
MSE_full <- data.frame(k = (1:len_validation),MSE = result)
ggplot(plot_full,aes(x = k, y = MSE)) + geom_point()
MSE_part <- subset(MSE_full, k < 50)
ggplot(plot_part,aes(x = k, y = MSE)) + geom_point()
a9 <- min(MSE_full$MSE)
a10 <- MSE_full[MSE_full$MSE == a9,1]
final_model_t <- knn.reg(train = training_t, test = testing_t, y = training_t$logSalePrice, k = a10)
final_residual_t <- testing3$SalePrice - exp(final_model_t$pred)
final_MSE_t <- mean(final_residual_t * final_residual_t)
final_MSE_t
result
library(IntClust)
training_n <- Normalization(training3, method = 'r')
training_n <- training_n[c("Lot.Area", "Total.Bsmt.SF", "Gr.Liv.Area", "Full.Bath", "Bedroom.AbvGr","Building.Age" , "SalePrice")]
validating_n <-  Normalization(validating3, method = 'r')
validating_n <- validating_n[c("Lot.Area", "Total.Bsmt.SF", "Gr.Liv.Area", "Full.Bath", "Bedroom.AbvGr","Building.Age" , "SalePrice")]
testing_n <-  Normalization(testing3, method = 'r')
testing_n <- testing_n[c("Lot.Area", "Total.Bsmt.SF", "Gr.Liv.Area", "Full.Bath", "Bedroom.AbvGr","Building.Age" , "SalePrice")]
result<-rep(1,len_validation)
for (i in (1:len_validation))
{
leo <- knn.reg(train=training_n,test=validating_n,y=training_n$SalePrice,k=i)
prediction_denorm <- leo$pred * (max(validating3) - min(validating3)) + min(validating3)
residual <- validating3$SalePrice - prediction_denorm
MSE <- mean(residual * residual)
result[i] <- MSE
}
#leo <- knn.reg(train=training_n,test=validating_n,y=training_n$SalePrice,k=1)
#prediction_denorm <- leo$pred * (max(validating3) - min(validating3)) + min(validating3)
#residual <- validating3$SalePrice - prediction_denorm
#MSE <- mean(residual * residual )
MSE_full <- data.frame(k = (1:len_validation),MSE = result)
ggplot(plot_full,aes(x = k, y = MSE)) + geom_point()
MSE_part <- subset(plot_full, k < 50)
ggplot(plot_part,aes(x = k, y = MSE)) + geom_point()
a11 <- min(MSE_full$MSE)
a12 <- MSE_full[MSE_full$MSE == a11,1]
final_model_n <- knn.reg(train = training_n, test = testing_n, y = training_n$SalePrice, k = 1)
prediction_denorm <- final_model_n$pred* (max(testing3) - min(testing3)) + min(testing3)
final_residual_n <- testing3$SalePrice - prediction_denorm
final_MSE_n<- mean(final_residual_n * final_residual_n)
final_MSE_n
# Import training, validation and test data set
len_validation <- nrow(validating3)
result<-rep(1,len_validation)
for (i in (1:len_validation))
{
leo <- knn.reg(train=training3,test=validating3,y=training3$SalePrice,k=i)
residual <- validating3$SalePrice - leo$pred
MSE <- mean(residual * residual)
result[i] <- MSE
}
MSE_full <- data.frame(k = (1:len_validation),MSE = result)
ggplot(MSE_full,aes(x = k, y = MSE)) + geom_point()
MSE_part <- subset(MSE_full, k < 50)
ggplot(MSE_part,aes(x = k, y = MSE)) + geom_point()
a7 <- min(MSE_full$MSE)
a8 <- MSE_full[MSE_full$MSE == a7,1]
final_model <- knn.reg(train = training3, test = testing3, y = training3$SalePrice, k = a8)
final_residual <- testing3$SalePrice - final_model$pred
final_MSE <- mean(final_residual * final_residual)
final_MSE
install.packages("googleVis")
G1 <- gvisGeoMap(Exports,locationvar='Country',numvar='Profit',options=list(dataMode='regions'))
require(googleVis)
G1 <- gvisGeoMap(Exports,locationvar='Country',numvar='Profit',options=list(dataMode='regions'))
Exports$Country<-c('Canada','Denmark','France','Germany','Israel','Italy','Japan','Netherlands','Singapore','Switzerland')
G1 <- gvisGeoChart(Exports,locationvar='Country',options=list(dataMode='regions'))
plot(G1)
